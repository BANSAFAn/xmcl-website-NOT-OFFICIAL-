
import type { Translations, SupportedLocale, LanguageConfig } from '@/types/i18n';
import { navigationTranslations } from './modules/navigation';
import { commonTranslations } from './modules/common';
import { homeTranslations } from './modules/home';
import { downloadTranslations, downloadMessagesTranslations } from './modules/downloads';
import { footerTranslations } from './modules/footer';
import { statsTranslations } from './modules/stats';
import { issuesTranslations } from './modules/issues';
import { blogTranslations } from './modules/blog';
import { guideTranslations } from './modules/guide';
import { changelogTranslations } from './modules/changelog';
import { testingTranslations } from './modules/testing';
import { themeTranslations, osSwitchTranslations } from './modules/theme';
import { uiTranslations } from './modules/ui';
import { docsTranslations } from './modules/docs';

// Импорт JSON-файлов переводов
import enJson from './json/en.json';
import ruJson from './json/ru.json';
import jaJson from './json/ja.json';
import arJson from './json/ar.json';
import deJson from './json/de.json';
import zhHantJson from './json/zh-Hant.json';

// Language configurations
export const languageConfigs: LanguageConfig[] = [
  { code: 'ru', name: 'Русский', flag: '🇷🇺', color: 'from-blue-500 to-red-500' },
  { code: 'en', name: 'English', flag: '🇺🇸', color: 'from-blue-500 to-red-500' },
  { code: 'ja', name: '日本語', flag: '🇯🇵', color: 'from-white to-red-500' },
  { code: 'uk', name: 'Українська', flag: '🇺🇦', color: 'from-blue-500 to-yellow-400' },
  { code: 'zh', name: '中文', flag: '🇨🇳', color: 'from-red-600 to-yellow-400' },
  { code: 'ar', name: 'العربية', flag: '🇸🇦', color: 'from-green-500 to-white' },
  { code: 'de', name: 'Deutsch', flag: '🇩🇪', color: 'from-black to-yellow-500 via-red-500' },
  { code: 'zh-Hant', name: '中文（繁體）', flag: '🇹🇼', color: 'from-blue-500 to-red-500' }
] as const;

// Build complete translations by merging all modular translations
function buildTranslations(): Record<SupportedLocale, Translations> {
  const translations: Record<SupportedLocale, Translations> = {} as Record<SupportedLocale, Translations>;

  for (const locale of ['en', 'ru', 'ja', 'zh', 'uk', 'ar', 'de', 'zh-Hant'] as SupportedLocale[]) {
    // Базовые переводы из JSON-файлов
    let baseTranslations = {};
    
    if (locale === 'en') baseTranslations = enJson;
    else if (locale === 'ru') baseTranslations = ruJson;
    else if (locale === 'ja') baseTranslations = jaJson;
    else if (locale === 'ar') baseTranslations = arJson;
    else if (locale === 'de') baseTranslations = deJson;
    else if (locale === 'zh-Hant') baseTranslations = zhHantJson;

    translations[locale] = {
      // Объединяем базовые переводы из JSON
      ...baseTranslations,
      
      // Модульные переводы
      nav: navigationTranslations[locale],
      common: commonTranslations[locale],
      home: homeTranslations[locale],
      downloadSection: downloadTranslations[locale],
      downloadMessages: downloadMessagesTranslations[locale],
      footer: footerTranslations[locale],
      stats: statsTranslations[locale],
      issues: issuesTranslations[locale],
      blog: blogTranslations[locale],
      guide: guideTranslations[locale],
      changelog: changelogTranslations[locale],
      testing: testingTranslations[locale],
      theme: themeTranslations[locale],
      osSwitch: osSwitchTranslations[locale],
      ui: uiTranslations[locale],
      docs: docsTranslations[locale],

      // Basic app information based on locale
      downloadXMCL: getDownloadXMCLText(locale),
      modernCrossplatformDescription: getModernDescText(locale),
      githubStars: getGitHubStarsText(locale),
      forks: getForksText(locale),
      lastVersion: getLastVersionText(locale)
    };
  }

  return translations;
}

function getDownloadXMCLText(locale: SupportedLocale): string {
  const texts = {
    en: "Download XMCL",
    ru: "Скачать XMCL",
    ja: "XMCLをダウンロード",
    zh: "下载XMCL",
    uk: "Завантажити XMCL",
    ar: "تحميل XMCL",
    de: "XMCL herunterladen",
    'zh-Hant': "下載XMCL"
  };
  return texts[locale];
}

function getModernDescText(locale: SupportedLocale): string {
  const texts = {
    en: "Modern cross-platform Minecraft launcher",
    ru: "Современный кроссплатформенный лаунчер Minecraft",
    ja: "モダンなクロスプラットフォームMinecraftランチャー",
    zh: "现代跨平台Minecraft启动器",
    uk: "Сучасний кросплатформенний лаунчер Minecraft",
    ar: "مشغل ماين كرافت حديث متعدد المنصات",
    de: "Moderner plattformübergreifender Minecraft-Launcher",
    'zh-Hant': "現代跨平台Minecraft啟動器"
  };
  return texts[locale];
}

function getGitHubStarsText(locale: SupportedLocale): string {
  const texts = {
    en: "GitHub Stars",
    ru: "Звёзды GitHub",
    ja: "GitHubスター",
    zh: "GitHub星标",
    uk: "Зірки GitHub",
    ar: "نجوم GitHub",
    de: "GitHub Sterne",
    'zh-Hant': "GitHub星標"
  };
  return texts[locale];
}

function getForksText(locale: SupportedLocale): string {
  const texts = {
    en: "Forks",
    ru: "Форки",
    ja: "フォーク",
    zh: "分支",
    uk: "Форки",
    ar: "تفريعات",
    de: "Forks",
    'zh-Hant': "分支"
  };
  return texts[locale];
}

function getLastVersionText(locale: SupportedLocale): string {
  const texts = {
    en: "Latest Version",
    ru: "Последняя версия",
    ja: "最新バージョン",
    zh: "最新版本",
    uk: "Остання версія",
    ar: "أحدث إصدار",
    de: "Neueste Version",
    'zh-Hant': "最新版本"
  };
  return texts[locale];
}

export const translations = buildTranslations();

// Helper function to get translation with fallback
export function getTranslation(
  locale: SupportedLocale,
  key: string,
  fallback: string = key
): string {
  const keys = key.split('.');
  let value: any = translations[locale];
  
  for (const k of keys) {
    if (value && typeof value === 'object' && k in value) {
      value = value[k];
    } else {
      return fallback;
    }
  }
  
  return typeof value === 'string' ? value : fallback;
}

// Helper to check if locale is supported
export function isSupportedLocale(locale: string): locale is SupportedLocale {
  return ['en', 'ru', 'ja', 'zh', 'uk', 'ar', 'de', 'zh-Hant'].includes(locale);
}

// Default locale
export const DEFAULT_LOCALE: SupportedLocale = 'en';
